x=1
#girls_90 = # fill your code here
head(g)
library(dplyr)
birth = read.csv('births.csv', stringsAsFactors=FALSE)
pwd
births <- read.csv("~/NYCDSA_Prework/R/births.csv")
View(births)
birth = read.csv('births.csv', stringsAsFactors=FALSE)
g = select(births,year)
head(g)
girls_90 = filter(births, sex='girl', year>=1990, year<=2000)
girls_90 = filter(births, sex=='girl', year>=1990, year<=2000)
head(girls_90)
head(births)
girls_90
births
group_by(birhts,sex)
group_by(sex)
births_by_sex <- group_by(births, sex)
summarize(births_by_sex,mean(births))
x=1
install.packages("caret")
setwd(Desktop)
setwd("C:\Users\hilmiuysal\Desktop\Data Science Bootcamp\NYC Data Science Academy\R\Knitr_RMarkdown\Knitr_and_RMarkdown\Knitr_and_RMarkdown")
install.packages("ggplot2")
data(mpg)
data(mpg)
data(mpg)
data('mpg'')
data('mpg')
data('mpg')
data
data()
ggplot2::
ggplot2
sub_CL = CL %>% select(HomeGoal, AwayGoal)
library(tidyverse)
sub_CL = CL %>% select(HomeGoal, AwayGoal)
CL = read.csv('https://s3.amazonaws.com/graderdata/Champions.csv', stringsAsFactors=FALSE)
sub_CL = CL %>% select(HomeGoal, AwayGoal)
sub_CL_draw = sub_CL %>% filter(HomeGoal == AwayGoal) %>% group_by(HomeGoal, AwayGoal) %>% summarise(cnt = n())
sub_CL[HomeGoal==2,]
sub_CL
sub_CL[-c(90:100),]
sub_CL[-(HomeGoal == AwayGoal),]
sub_CL[(HomeGoal == AwayGoal),]
sub_CL[HomeGoal == AwayGoal,]
sub_CL[sub_CL$HomeGoal == sub_CL$AwayGoal,]
sub_CL[sub_CL$HomeGoal == sub_CL$AwayGoal,] %>% nrow()
sub_CL[-(sub_CL$HomeGoal == sub_CL$AwayGoal),]
sub_CL[(sub_CL$HomeGoal == sub_CL$AwayGoal),]
sub_CL[!(sub_CL$HomeGoal == sub_CL$AwayGoal),]
sub_CL[(sub_CL$HomeGoal != sub_CL$AwayGoal),]
sub_CL[(sub_CL$HomeGoal <> sub_CL$AwayGoal),]
sub_CL[(sub_CL$HomeGoal != sub_CL$AwayGoal),]
which(sub_CL$HomeGoal != sub_CL$AwayGoal)
sub_CL[which(sub_CL$HomeGoal != sub_CL$AwayGoal),]
sub_CL[(sub_CL$HomeGoal != sub_CL$AwayGoal),] %>% nrow()
sub_CL = sub_CL[(sub_CL$HomeGoal != sub_CL$AwayGoal),]
sub_CL2 = data.frame(HomeGoal = sub_CL$AwayGoal, AwayGoal = sub_CL$HomeGoal)
tail(sub_CL)
tail(sub_CL2)
nrow(sub_CL)
nrow(sub_CL2)
sub_CL %>% inner_join(sub_CL2, by = c('HomeGoal','AwayGoal') )
sub_CL %>% inner_join(sub_CL2, by = c('HomeGoal','AwayGoal') ) %>% distinct()
sub_CL_rbind = rbind(sub_CL, sub_CL2)
nrow(sub_CL_rbind)
library(tidyverse)
CL = read.csv('https://s3.amazonaws.com/graderdata/Champions.csv', stringsAsFactors=FALSE)
sub_CL = CL %>% select(HomeGoal, AwayGoal)
head(sub_CL)
nrow(sub_CL)
str(sub_CL)
unlist(sub_CL)
sub_CL = unlist(sub_CL)
str(sub_CL)
class(sub_CL)
sub_CL["HomeGoal1"]
sub_CL["AwayGoal1"]
CL = read.csv('https://s3.amazonaws.com/graderdata/Champions.csv', stringsAsFactors=FALSE)
sub_CL = CL %>% select(HomeGoal, AwayGoal)
sub_CL = unlist(sub_CL)
HG = 'HomeGoal'
AG = 'AwayGoal'
HG = 'HomeGoal'
AG = 'AwayGoal'
for (i in nrow(sub_CL)) {
HG = HG + i
AG = AG + i
print(HG)
print(AG)
}
for (i in nrow(sub_CL)) {
HG = HG + i
AG = AG + i
print(HG)
print(AG)
}
nrow(sub_CL)
CL = read.csv('https://s3.amazonaws.com/graderdata/Champions.csv', stringsAsFactors=FALSE)
sub_CL = CL %>% select(HomeGoal, AwayGoal)
sub_CL = unlist(sub_CL)
HG = 'HomeGoal'
AG = 'AwayGoal'
for (i in nrow(sub_CL)) {
HG = HG + i
AG = AG + i
print(HG)
print(AG)
}
}
CL = read.csv('https://s3.amazonaws.com/graderdata/Champions.csv', stringsAsFactors=FALSE)
head(CL)
sub_CL = CL %>% select(HomeGoal, AwayGoal)
hed
head(sub_CL)
sub_CL = unlist(sub_CL)
head(sub_CL)
HG = 'HomeGoal'
AG = 'AwayGoal'
for (i in nrow(sub_CL)) {
HG = HG + i
AG = AG + i
print(HG)
print(AG)
}
for (i in nrow(sub_CL)) {
HG = HG + i
AG = AG + i
print(HG)
print(AG)
}
nrow(sub_CL)
count(sub_CL)
classx
class(sub_CL)
str(sub_CL)
size
sub_CL['HomeGoal']
sub_CL['HomeGoal1']
for (i in 1:200) {
HG = HG + i
AG = AG + i
print(HG)
print(AG)
}
for (i in 1:200) {
HG = HG + as.character(i)
AG = AG + as.character(i)
print(HG)
print(AG)
}
a = 'ali'
b = 'hilmi'
a+b
for (i in 1:200) {
HG = paste0(HG, as.character(i))
AG = paste0(AG, as.character(i))
print(HG)
print(AG)
}
for (i in 1:2) {
HG = paste0(HG, as.character(i))
AG = paste0(AG, as.character(i))
print(HG)
print(AG)
}
for (i in 1:2) {
print(i)
HG = paste0(HG, as.character(i))
AG = paste0(AG, as.character(i))
print(HG)
print(AG)
}
HG = 'HomeGoal'
AG = 'AwayGoal'
for (i in 1:2) {
print(i)
HG = paste0(HG, as.character(i))
AG = paste0(AG, as.character(i))
print(HG)
print(AG)
}
for (i in 1:2) {
HG = 'HomeGoal'
AG = 'AwayGoal'
HG = paste0(HG, as.character(i))
AG = paste0(AG, as.character(i))
print(HG)
print(AG)
}
CL = read.csv('https://s3.amazonaws.com/graderdata/Champions.csv', stringsAsFactors=FALSE)
sub_CL = CL %>% select(HomeGoal, AwayGoal)
head(sub_CL)
sub_CL[1,]
sub_CL[1,] == sub_CL
ls()
rm(list=ls())
CL = read.csv('https://s3.amazonaws.com/graderdata/Champions.csv', stringsAsFactors=FALSE)
HomeGoal = CL$HomeGoal
str(HomeGoal)
class(HomeGoal)
HomeGoal = as.list(CL$HomeGoal)
str(HomeGoal)
class(HomeGoal)
HomeGoal$
HomeGoal
HomeGoal = as.list(CL$HomeGoal)
class(HomeGoal)
HomeGoal[[1]]
HomeGoal[1]
HomeGoal[2]
HomeGoal[3]
ll = list(HomeGoal = CL$HomeGoal)
ll
ll = list(HomeGoal = CL$HomeGoal, AwayGoal = CL$AwayGoal)
ll
ll[HomeGoal]
ll['HomeGoal']
str(ll['HomeGoal'])
str(ll)
#(a)
#install.packages("ggplot2")
require('ggplot2')
library(tidyverse)
library('dplyr')
#(d)
mpg %>% group_by(manufacturer,model) %>% summarise(max_cty = max(cty)) %>% arrange(desc(max_cty))
#1 and 2
mpg = mpg %>% mutate(ratioHVE = hwy/displ, ratioCVE = cty/displ)
#3
mpg %>% group_by(year, manufacturer) %>% summarise(avg_ratioHVE = mean(ratioHVE), avg_ratioCVE = mean(ratioCVE)) %>% arrange(desc(year), manufacturer)
#4
mpg %>% group_by(year, drv) %>% summarise(max_ratioHVE = max(ratioHVE))
#4
mpg %>% group_by(year, drv) %>% summarise(max_ratioHVE = max(ratioHVE)) %>% arrange(desc(max_ratioHVE))
#2
nyc_jobs2 %>% group_by(Agency) %>% summarise(mean_sal_range_from = mean(Salary.Range.From)) %>% arrange(desc(mean_sal_range_from)) %>% head(1)
nyc_jobs2 = rbind.data.frame(nyc_jobs_ann, nyc_jobs_day, nyc_jobs_hour, stringsAsFactors = F)
#1
nyc_jobs = read.csv('NYC_Jobs.csv', stringsAsFactors = F)
nyc_jobs_ann = nyc_jobs %>% filter(Salary.Frequency == 'Annual')
nyc_jobs_hour = nyc_jobs %>% filter(Salary.Frequency == 'Hourly')
nyc_jobs_day = nyc_jobs %>% filter(Salary.Frequency == 'Daily')
nyc_jobs_hour = nyc_jobs_hour %>% mutate(Salary.Range.From = Salary.Range.From*8*5*4*12, Salary.Range.To = Salary.Range.To*8*5*4*12, Salary.Frequency = 'Annual')
nyc_jobs_day = nyc_jobs_day %>% mutate(Salary.Range.From = Salary.Range.From*5*4*12, Salary.Range.To = Salary.Range.To*5*4*12, Salary.Frequency = 'Annual')
nyc_jobs2 = rbind.data.frame(nyc_jobs_ann, nyc_jobs_day, nyc_jobs_hour, stringsAsFactors = F)
nyc_jobs2 %>% group_by(Agency) %>% summarise(avg_sal_from = mean(Salary.Range.From), median_sal_from = median(Salary.Range.From), avg_sal_to = mean(Salary.Range.To), median_sal_to = median(Salary.Range.To)) %>% arrange(Agency)
#2
nyc_jobs2 %>% group_by(Agency) %>% summarise(mean_sal_range_from = mean(Salary.Range.From)) %>% arrange(desc(mean_sal_range_from)) %>% head(1)
#3
nyc_jobs2 = nyc_jobs2 %>% mutate(salary_diff_to_from = Salary.Range.To - Salary.Range.From)
nyc_jobs2 %>% group_by(Posting.Type) %>% summarise(mean(salary_diff_to_from))
#4
nyc_jobs2 %>% group_by(Level) %>% summarise(mean_sal_range = mean(salary_diff_to_from)) %>% arrange(desc(mean_sal_range))
#5
sub_jobs = nyc_jobs2 %>% select(Job.ID, Business.Title, Salary.Range.From, Salary.Range.To) %>% distinct()
multi_position_jobs = sub_jobs %>% filter(str_detect(Business.Title, 'positions|Positions'))
multi_position_jobs = separate(multi_position_jobs, Business.Title, c('Part1','Part2'), sep = "\\(", remove = F)
multi_position_jobs = separate(multi_position_jobs, Part2, c('Num_of_Positions','Smth_else'), sep = " ", remove = T)
multi_position_jobs = multi_position_jobs %>% mutate(New.Salary.Range.From = as.numeric(Num_of_Positions)*Salary.Range.From, New.Salary.Range.To = as.numeric(Num_of_Positions)*Salary.Range.To)
multi_position_jobs = multi_position_jobs[c(-3,-4,-5,-6,-7)]
sub_jobs2 = sub_jobs %>% left_join(multi_position_jobs, by = c('Job.ID','Business.Title')) %>% mutate(Salary.Range.From = ifelse(is.na(New.Salary.Range.From), Salary.Range.From, New.Salary.Range.From), Salary.Range.To = ifelse(is.na(New.Salary.Range.To), Salary.Range.To, New.Salary.Range.To))
sub_jobs2 = sub_jobs2[c(-5,-6)]
min_expenses = sum(sub_jobs2$Salary.Range.From)
max_expenses = sum(sub_jobs2$Salary.Range.To)
min_expenses
max_expenses
#6
nyc_jobs2 %>% group_by(Civil.Service.Title) %>% summarise(max_diff_salary = max(salary_diff_to_from)) %>% arrange(desc(max_diff_salary)) %>% head(1)
nyc_jobs2 %>% group_by(Agency) %>% summarise(max(mean(Salary.Range.From)))
#2
nyc_jobs2 %>% group_by(Agency) %>% summarise(mean_sal_range_from = mean(Salary.Range.From)) %>% arrange(desc(mean_sal_range_from)) %>% head(1)
#2
nyc_jobs2 %>% group_by(Agency) %>% summarise(mean_sal_range_from = mean(Salary.Range.From)) %>% arrange(desc(mean_sal_range_from)) %>% head(1)
nyc_jobs2
nyc_jobs2 %>% group_by(Agency) %>% summarise(mean_sal_range_from = mean(Salary.Range.From))
nyc_jobs2 %>% group_by(Agency) %>% summarise(mean_sal_range_from = mean(Salary.Range.From))
nyc_jobs2 %>% group_by(Agency) %>% summarise(max(mean(Salary.Range.From)))
#6
nyc_jobs2 %>% group_by(Civil.Service.Title) %>% summarise(max_diff_salary = max(salary_diff_to_from)) %>% arrange(desc(max_diff_salary)) %>% head(1)
data.frame(c(0,1,2,3,4,1), c(1,1,3,2,1,4))
data.frame(H = c(0,1,2,3,4,1), A = c(1,1,3,2,1,4))
score = data.frame(H = c(0,1,2,3,4,1), A = c(1,1,3,2,1,4))
score
score %>% mutate(TOTAL = H+A, SUBT = abs(H-A))
score2 = score %>% mutate(TOTAL = H+A, SUBT = abs(H-A))
\
score2
score2 %>% group_by(TOTAL,SUBT) %>% summarise(CNT = n())
score_cnt = score2 %>% group_by(TOTAL,SUBT) %>% summarise(CNT = n())
score2 %>% inner_join(score_cnt, by = c('TOTAL','SUBT'))
score2 %>% inner_join(score_cnt, by = c('TOTAL','SUBT')) %>% filter(max(H), min(A))
score2 %>% inner_join(score_cnt, by = c('TOTAL','SUBT')) %>% group_by(TOTAL, SUBT) %>% summarise(max(H), min(A), max(CNT))
score
score3 = score2 %>% inner_join(score_cnt, by = c('TOTAL','SUBT')) %>% group_by(TOTAL, SUBT) %>% summarise(max(H), min(A), max(CNT))
score3[-1]
score3 = score2 %>% inner_join(score_cnt, by = c('TOTAL','SUBT')) %>% group_by(TOTAL, SUBT) %>% summarise(H = max(H), A = min(A), CNT = max(CNT))
score3[-1]
score3[-1][-2]
score3[-1][-1]
#5
sub_CL = CL %>% select(HomeGoal, AwayGoal)
head(sub_CL)
sub_CL = sub_CL %>% mutate(TOTAL = HomeGoal + AwayGoal, SUBT = abs(HomeGoal-AwayGoal))
head(sub_CL)
sub_CL_cnt = sub_CL %>% group_by(TOTAL,SUBT) %>% summarise(CNT = n())
sub_CL_final = sub_CL %>% inner_join(sub_CL_cnt, by = c('TOTAL','SUBT')) %>% group_by(TOTAL,SUBT) %>% summarise(HomeGoal = max(HomeGoal), AwayGoal = min(AwayGoal), CNT = max(CNT))
sub_CL_final
sub_CL_final[-1][-1]
sub_CL_final = sub_CL %>% inner_join(sub_CL_cnt, by = c('TOTAL','SUBT')) %>% group_by(TOTAL,SUBT) %>% summarise(HomeGoal = max(HomeGoal), AwayGoal = min(AwayGoal), CNT = max(CNT)) %>% arrange(desc(CNT))
sub_CL_final = sub_CL_final[-1][-1]
sub_CL_final
sum(sub_CL_final$CNT)
sub_CL_final
sub_CL_final
sub_CL_final %>% group_by(HomeGoal,AwayGoal) %>% summarise(n())
sub_CL_final
R.version()
version
rsconnect::setAccountInfo(name='alihilmiuysal', token='7D0D66AE4D2E63D012E55F824A345FD7', secret='lUY+YRfkf36MuXFdLRMb9BnxF1wGuo6Txgr9v+TM')
rsconnect::setAccountInfo(name='alihilmiuysal', token='7D0D66AE4D2E63D012E55F824A345FD7', secret='lUY+YRfkf36MuXFdLRMb9BnxF1wGuo6Txgr9v+TM')
shiny::runApp('C:/Users/hilmiuysal/Desktop/NYC Data Science Academy/Projects/Shiny/Cryptograph')
runApp('C:/Users/hilmiuysal/Desktop/NYC Data Science Academy/Projects/Shiny/Cryptograph')
ggplot(pop_btc_group_continent_ratio,
aes(x = 2,y = ratio,fill = as.factor(PopGroup))) +
geom_bar(position = 'fill', stat = 'identity') +
facet_wrap( ~ continent, nrow =2) +
coord_polar(theta = "y") +
labs(x = NULL, y = NULL) +
xlim(0.5, 2.5) +
scale_fill_discrete(name = "Popularity Index Group") +
theme_bw() +
theme(plot.margin = margin(2, 1, 1, 1, "cm"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5)) +
ggtitle("Bitcoin Popularity Index Distribution by Continent")
ggplot(pop_btc_group_continent_ratio,
aes(x = 2,y = ratio,fill = as.factor(PopGroup))) +
geom_bar(position = 'fill', stat = 'identity') +
facet_wrap( ~ continent, nrow =2) +
coord_polar(theta = "y") +
labs(x = NULL, y = NULL) +
xlim(0.5, 2.5) +
scale_fill_discrete(name = "Popularity Index Group") +
theme_bw() +
theme(plot.margin = margin(2, 1, 1, 1, "cm"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 1)) +
ggtitle("Bitcoin Popularity Index Distribution by Continent")
ggplot(pop_btc_group_continent_ratio,
aes(x = 2,y = ratio,fill = as.factor(PopGroup))) +
geom_bar(position = 'fill', stat = 'identity') +
facet_wrap( ~ continent, nrow =2) +
coord_polar(theta = "y") +
labs(x = NULL, y = NULL) +
xlim(0.5, 2.5) +
scale_fill_discrete(name = "Popularity Index Group") +
theme_bw() +
theme(plot.margin = margin(2, 1, 1, 1, "cm"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = -1)) +
ggtitle("Bitcoin Popularity Index Distribution by Continent")
ggplot(pop_btc_group_continent_ratio,
aes(x = 2,y = ratio,fill = as.factor(PopGroup))) +
geom_bar(position = 'fill', stat = 'identity') +
facet_wrap( ~ continent, nrow =2) +
coord_polar(theta = "y") +
labs(x = NULL, y = NULL) +
xlim(0.5, 2.5) +
scale_fill_discrete(name = "Popularity Index Group") +
theme_bw() +
theme(plot.margin = margin(2, 1, 1, 1, "cm"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 0)) +
ggtitle("Bitcoin Popularity Index Distribution by Continent")
ggplot(pop_btc_group_continent_ratio,
aes(x = 2,y = ratio,fill = as.factor(PopGroup))) +
geom_bar(position = 'fill', stat = 'identity') +
facet_wrap( ~ continent, nrow =2) +
coord_polar(theta = "y") +
labs(x = NULL, y = NULL) +
xlim(0.5, 2.5) +
scale_fill_discrete(name = "Popularity Index Group") +
theme_bw() +
theme(plot.margin = margin(2, 1, 1, 1, "cm"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 0.2)) +
ggtitle("Bitcoin Popularity Index Distribution by Continent")
ggplot(pop_btc_group_continent_ratio,
aes(x = 2,y = ratio,fill = as.factor(PopGroup))) +
geom_bar(position = 'fill', stat = 'identity') +
facet_wrap( ~ continent, nrow =2) +
coord_polar(theta = "y") +
labs(x = NULL, y = NULL) +
xlim(0.5, 2.5) +
scale_fill_discrete(name = "Popularity Index Group") +
theme_bw() +
theme(plot.margin = margin(2, 1, 1, 1, "cm"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 0.2, vjust = 0.2)) +
ggtitle("Bitcoin Popularity Index Distribution by Continent")
ggplot(pop_btc_group_continent_ratio,
aes(x = 2,y = ratio,fill = as.factor(PopGroup))) +
geom_bar(position = 'fill', stat = 'identity') +
facet_wrap( ~ continent, nrow =2) +
coord_polar(theta = "y") +
labs(x = NULL, y = NULL) +
xlim(0.5, 2.5) +
scale_fill_discrete(name = "Popularity Index Group") +
theme_bw() +
theme(plot.margin = margin(2, 1, 1, 1, "cm"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 0.2, vjust = 0.5)) +
ggtitle("Bitcoin Popularity Index Distribution by Continent")
ggplot(pop_btc_group_continent_ratio,
aes(x = 2,y = ratio,fill = as.factor(PopGroup))) +
geom_bar(position = 'fill', stat = 'identity') +
facet_wrap( ~ continent, nrow =2) +
coord_polar(theta = "y") +
labs(x = NULL, y = NULL) +
xlim(0.5, 2.5) +
scale_fill_discrete(name = "Popularity Index Group") +
theme_bw() +
theme(plot.margin = margin(2, 1, 1, 1, "cm"),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold", hjust = 0.2)) +
ggtitle("Bitcoin Popularity Index Distribution by Continent")
runApp('C:/Users/hilmiuysal/Desktop/NYC Data Science Academy/Projects/Shiny/Cryptograph')
all_coins %>% filter(name == 'Stellar' & date == '2017-07-10')
all_coins %>% filter(name == 'Stellar' & date == '2017-07-10') %>% pull(close)
class(all_coins %>% filter(name == 'Stellar' & date == '2017-07-10') %>% pull(close))
m=all_coins %>% filter(name == 'Stellar' & date == '2017-07-10') %>% pull(close)
percc=round(300/m*100)
percc
pret_perc = prettyNum(percc, big.mark = ",")
pret_perc
round((input$money*as.numeric(pret_perc))/100)
round((1*as.numeric(pret_perc))/100)
1*as.numeric(pret_perc)
runApp('C:/Users/hilmiuysal/Desktop/NYC Data Science Academy/Projects/Shiny/Cryptograph')
runApp('C:/Users/hilmiuysal/Desktop/NYC Data Science Academy/Projects/Shiny/Cryptograph')
setwd("C:/Users/hilmiuysal/Desktop/NYC Data Science Academy/Projects/Shiny/Cryptograph")
